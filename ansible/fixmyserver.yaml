- name: Install packages
  hosts: all
  become: yes

  tasks:
  - name: Install packages
    dnf:
      name:
        - atop
        - clang
        - clang-tools-extra
        - git
        # - grpcio
        # - grpcio-tools
        - htop
        - httpd
        - jq
        - pip
        - tmux
        - zsh
      state: present

  - name: Install pips
    ansible.builtin.pip:
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/pip_module.html
      name:
        #- ansible
        - flask
        #- jupyter


- name: Configure user
  hosts: all
  vars:
    username: "njormrod"
  become: yes
  become_user: "{{ username }}"

  tasks:
  - name: Create directories
    file:
      path: "~/{{ item }}"
      state: directory
    with_items:
      - dev
      - jupyter
      - repos

  - name: Clone github repos
    # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/git_module.html
    ansible.builtin.git:
      repo: "git@github.com:{{ item.maker }}/{{ item.name }}.git"
      dest: "~/{{ item.root }}/{{ item.name }}"
      accept_hostkey: yes
      key_file: "~/.ssh/github_ed25519"
    with_items:
      - { root: "dev", maker: "Gownta", name: "devenv" }
      #- { root: "dev", maker: "Gownta", name: "starlang" }
      #- { root: "dev", maker: "Gownta", name: "values" }
      #- { root: "dev", maker: "Gownta", name: "hanabi" }
      #- { root: "dev", maker: "Gownta", name: "farmwars" }

  - name: Check if the files are actually original
    stat:
      path: "~/dev/devenv/originals"
    register: originals_check

  - block:
    - name: Create dotfile save dir
      file:
        path: "~/dev/devenv/originals"
        state: directory

    - name: Save dotfiles
      ignore_errors: yes
      copy:
        src: "~/{{ item }}"
        remote_src: true
        dest: "~/dev/devenv/originals/{{ item | regex_replace('^\\.', '') }}"
        force: false
      with_items: "{{ existing_dotfiles }}"

    - name: Delete dotfiles
      file:
        path: "~/{{ item }}"
        state: absent
      with_items: "{{ existing_dotfiles }}"

    vars:
      existing_dotfiles:
        - .bashrc
        - .bash_logout
        - .bash_profile
        - .zshrc
        - .zprofile
    when: not originals_check.stat.exists

  - name: Symlink dotfiles
    file:
      path: "~/{{ item.path }}"
      state: link
      src: "~/dev/devenv/{{ item.src }}"
    with_items:
      - { path: ".gitconfig", src: "configs/gitconfig" }
      - { path: ".tm_properties", src: "configs/textmate_properties" }
      - { path: ".tmux.conf", src: "configs/tmux.conf" }
      - { path: ".vimrc", src: "configs/vimrc" }
      - { path: ".zshenv", src: "configs/shell/env" }
      - { path: ".zshrc", src: "configs/shell/zshrc" }

  - name: Create template dotfiles
    copy:
      dest: "~/{{ item.path }}"
      content: "{{ item.content }}"
      force: false
    with_items:
      - { path: ".secrets", content: "# Add lines to this file like export SECRET=ABC\n" }
      - { path: ".tmux.panes", content: "# ~\n# ~\n# ~\n# ~\n# ~\n" }

  - name: Create initial dotfiles
    copy:
      src: "~/dev/devenv/{{ item.src }}"
      remote_src: true
      dest: "~/{{ item.dest }}"
      force: false
    with_items:
      - { src: "configs/shell/prompt_vars_example", dest: ".prompt_vars" }
