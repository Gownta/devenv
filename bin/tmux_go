#!/usr/bin/python3

"""
tmux_go will attach to the running tmux server, creating one if
it doesn't exist

References:
- tmux wiki:
    https://github.com/tmux/tmux/wiki
- tmux man page:
    https://man7.org/linux/man-pages/man1/tmux.1.html
"""

"""
Notes on new-session:
-d; do not attach session to shell
-e, like new-window
-c start_directory
-n window-name
-s session-name
-t group-name; new windows are added to this group, which could be a session-name
-A: behave like attach-session if session-name exists

Notes on new-window:
> If -d is given, the session does not make the new window the current window.
> -e takes the form ‘VARIABLE=value’ ... it may be specified multiple times.
- -n window-name

Notes on split-window:
> -h does a horizontal split and -v a vertical split
- -l 50%
> All other options have the same meaning as for the new-window command
- ...such as -t target-window
"""


import os
import subprocess
import sys


# Socket set with tmux's -S flag
# Within tmux, run `tmux display -p '#{socket_path}'` to see the path
tmux_dir = os.path.join(os.getenv("NJORMROD_DEVENV"), "workspace", "tmux")
os.makedirs(tmux_dir, exist_ok=True)
socket_dir = os.path.join(tmux_dir, "tmux_socket")


def tmux(s, **kwargs):
    cmd = ["tmux", "-S", socket_dir] + s.split()
    #print(" ".join(cmd))
    return subprocess.run(cmd, **kwargs)


def start():
    # Load pane info from ~/.tmux.panes
    panes_path = os.path.expanduser("~/.tmux.panes")
    with open(panes_path, "r") as f:
        panes_config = f.read()

    # Session name
    session_name = "me"

    tmux("start-server")
    ret = tmux(f"has-session -t {session_name}")
    if ret.returncode == 1:
        for i, line in enumerate(panes_config.rstrip().splitlines()):
            wname, wdir = line.split(' ', maxsplit=1)
            wdir = os.path.realpath(os.path.expanduser(wdir))
            cmd = "session -d -s" if i == 0 else "window -t"
            tmux(f"new-{cmd} {session_name} -n {wname} -c {wdir}")
            tmux(f"splitw -h -c {wdir}")
        tmux("select-window -t 1")

    tmux(f"attach-session -t {session_name}")


def rebalance():
    windows = tmux("list-windows", text=True, capture_output=True).stdout
    n_windows = len(windows.splitlines())
    for i in range(n_windows):
        tmux(f"select-layout -t {i+1}.1 even-horizontal")


if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1][:1].lower() == "rebalance"[0]:
            rebalance()
        else:
            print(f"unrecognized subcommand {sys.argv[1]}")
    else:
        start()
