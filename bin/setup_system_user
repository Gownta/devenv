#!/usr/bin/python3


import argparse
import getpass
import os
import pwd
import shlex
import shutil
import subprocess
import sys


def get_args(argv):
    parser = argparse.ArgumentParser(
        prog="setup_system_user",
        description="Setup a system user, with sudoer power",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument(
        "unixname",
        help="The unixname of the user to add",
    )

    args = parser.parse_args(argv)

    return args


def cmd(cmd, check=True, **kwargs):
    print(" ".join(shlex.quote(c) for c in cmd))
    return subprocess.run(cmd, check=check, **kwargs)


def ensure_running_as_root():
    cur_user = getpass.getuser()
    if cur_user != "root":
        print("Must run setup_system_user as root")
        exit(1)


def create_user(unixname):
    exists = subprocess.run(["id", unixname], capture_output=True).returncode == 0
    assert not exists
    cmd(["sudo", "adduser", unixname])


def grant_sudo_power(unixname):
    sudoers = "/etc/sudoers"
    with open(sudoers) as f:
        content = f.read()
    content = content + f"""
## Grant {unixname} full sudoer power
{unixname}\tALL=(ALL)\tNOPASSWD: ALL
"""
    tmp = sudoers + ".tmp"
    try:
        with open(tmp, "w") as f:
            f.write(content)
        subprocess.check_call(["sudo", "visudo", "-c", "-f", tmp])
        shutil.move(tmp, sudoers)
    finally:
        try:
            os.remove(tmp)
        except:
            pass

def maybe_get_auth_keys():
    try:
        ec2u = pwd.getpwnam("ec2-user")
    except:
        return None

    auth_keys = os.path.join(ec2u.pw_dir, ".ssh/authorized_keys")
    if not os.path.exists(auth_keys):
        return None

    res = subprocess.run(["sudo", "cat", auth_keys], capture_output=True, text=True)
    if res.returncode != 0:
        return None
    return res.stdout


def change_user_to(unixname):
    user_info = pwd.getpwnam(unixname)
    os.setgid(user_info.pw_gid)
    os.setuid(user_info.pw_uid)


def setup_ssh(unixname, auth_keys=None):
    # Run as the user from their homedir
    who = pwd.getpwnam(unixname)
    assert unixname == who.pw_name, who.pw_name
    os.chdir(who.pw_dir)

    # Make the directory
    os.makedirs(".ssh", mode=0o700, exist_ok=True)

    # Setup authorized_keys
    if auth_keys:
        auth_keys_file = ".ssh/authorized_keys"
        with open(auth_keys_file, "x") as f:
            f.write(auth_keys)
        os.chmod(auth_keys_file, 0o600)

    # Setup ed25519
    cmd(["ssh-keygen", "-t", "ed25519", "-f", ".ssh/id_ed25519", "-C", "nicholas.ormrod@gmail.com"])

    # Print info for github
    pub = ".ssh/id_ed25519.pub"
    with open(pub) as f:
        content = f.read()
    print(f"\n\nAdd the following key to github at https://github.com/settings/keys:\n\n  {content}")
    input("press any key to continue")


if __name__ == "__main__":
    args = get_args(sys.argv[1:])
    unixname = args.unixname

    ensure_running_as_root()
    create_user(unixname)
    grant_sudo_power(unixname)
    auth_keys = maybe_get_auth_keys()
    change_user_to(unixname)
    setup_ssh(unixname, auth_keys)

    print(f"\nRun the following command as {unixname}:\n  eval $(ssh-agent -s) ; ssh-add .ssh/id_ed25519")
