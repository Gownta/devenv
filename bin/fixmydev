#!/usr/bin/python3

"""
fixmydev

Run a series of health checks and remediations on the current server.

Standalone file that can also be used to set up a new server.
"""


import argparse
import getpass
import os
import shlex
import shutil
import subprocess
import sys


################################################################################
### Args
################################################################################


def get_parser():
    parser = argparse.ArgumentParser(
        prog="fixmydev",
        description="Fix my devserver",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument(
        "--no-color",
        action="store_true",
        help="Disable color in the output",
    )

    parser.add_argument(
        "-i",
        "--interactive",
        action="store_true",
        help="Prompt before running commands",
    )

    return parser


def init_args(argv):
    parser = get_parser()
    global args
    args = parser.parse_args(argv)


################################################################################
### Interaction
################################################################################


def query(msg, valid=None):
    if valid is None:
        valid = ["", "y", "n"]
    while True:
        ans = input(msg)[:1].lower()
        if ans in valid:
            return ans


def color(msg, clr):
    if args.no_color:
        return msg
    return f"\033[38;5;{clr}m{msg}\033[0m"


def run(cmd, check=True, **kwargs):
    if args.interactive:
        pre = "Run command '"
        post = "'? [Y/n] "
    else:
        pre = "Running command '"
        post = "'"
    pre = color(pre, 223)
    post = color(post, 223)
    mid = color(' '.join(shlex.quote(c) for c in cmd), 220)
    whole = pre + mid + post

    if args.interactive:
        ans = query(whole)
        if ans not in ["", "y"]:
            return None
    else:
        print(whole, flush=True)

    return subprocess.run(cmd, check=check, **kwargs)


################################################################################
### Fixups
################################################################################


def set_timezone():
    print(color("Setting timezone to PST...", 32))
    run(["sudo", "timedatectl", "set-timezone", "America/Los_Angeles"])


def install_packages(packages):
    print(color("Fetching packages...", 32))
    run(["sudo", "dnf", "install", "-y"] + packages)
    run(["sudo", "dnf", "upgrade"])


def my_github(my_repos):
    os.makedirs("dev", exist_ok=True)

    for repo in my_repos:
        print(color(f"Cloning {repo}...", 32))
        dst = f"dev/{repo}"
        if not os.path.exists(dst):
            run(["git", "clone", f"git@github.com:Gownta/{repo}.git", dst])


def dotfiles():
    rms = [".bashrc", ".bash_profile", ".bash_logout", ".zshrc", ".zprofile"]
    syms = {
        "configs/gitconfig": ".gitconfig",
        "configs/textmate_properties": ".tm_properties",
        "configs/tmux.conf": ".tmux.conf",
        "configs/vimrc": ".vimrc",
        "configs/shell/env": ".zshenv",
        "envs/aws_linux/zshrc": ".zshrc",
    }
    mk = {
        ".secrets": "# Add lines to this file like export SECRET=ABC\n",
        ".tmux.panes": "# ~\n" * 9,
    }
    cp = {
        ".prompt_vars": "configs/shell/prompt_vars_example",
    }

    assert os.path.exists("dev/devenv"), "need to clone devenv first"
    orig = "dev/devenv/originals"
    os.makedirs(orig, exist_ok=True)

    for rm in rms:
        if os.path.exists(rm):
            if rm in syms.values() and os.path.islink(rm):
                continue
            dn = rm[1:] if rm.startswith(".") else rm
            dst = os.path.join(orig, dn)
            print(color(f"Saving {rm} to {dst}...", 32))
            shutil.move(rm, dst)

    for real, sym in syms.items():
        real = os.path.join("dev/devenv", real)
        if not os.path.exists(sym):
            print(color(f"Symlinking {sym} -> {real}...", 32))
            os.symlink(real, sym)
        elif os.path.islink(sym) and os.readlink(sym) == real:
            pass
        else:
            print(color(f"Dotfile {sym} already exists", 160))

    for name, content in mk.items():
        if not os.path.exists(name):
            print(color(f"Making {name}...", 32))
            with open(name, "x") as f:
                f.write(content)

    for name, src in cp.items():
        if not os.path.exists(name):
            print(color(f"Making {name}...", 32))
            shutil.copy(os.path.join("dev/devenv", src), name)

    print(color("On my local mbp, symlink .zlogin for the ssh portal", 10))


def shell_to_zsh(user):
    print(color("Using zsh...", 32))

    passwd = subprocess.run(["getent", "passwd", user], capture_output=True, text=True, check=True).stdout.strip()
    shell = passwd.split(":")[-1]

    if os.path.basename(shell) != "zsh":
        zsh = subprocess.check_output(["which", "zsh"], text=True).strip()
        print(f"Shell is {shell}; switching to zsh ({zsh})")
        run(["sudo", "usermod", "--shell", zsh, user])

    print(color("Run 'zsh' to switch shell", 10))


################################################################################
### Main
################################################################################


if __name__ == "__main__":
    init_args(sys.argv[1:])

    # Ensure this is run as user, and not as root, from the homedir
    cur_user = getpass.getuser()
    assert cur_user != "root", "fixmydev should be run as a sudo-priviledged user"
    os.chdir(os.path.expanduser("~"))

    # Timezone
    set_timezone()

    # Packages
    install_packages(["git", "zsh", "tmux", "htop", "pip"])

    # Github repos
    my_github(["devenv", "starlang", "values", "hanabi", "farmwars"])

    # Dotfiles
    dotfiles()

    # Shell to zsh
    shell_to_zsh(cur_user)
